//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFStudent.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="vwResult", Namespace="http://schemas.datacontract.org/2004/07/WCFStudent1")]
    [System.SerializableAttribute()]
    public partial class vwResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Expr1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Expr2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GradeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StudentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StudentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Expr1 {
            get {
                return this.Expr1Field;
            }
            set {
                if ((this.Expr1Field.Equals(value) != true)) {
                    this.Expr1Field = value;
                    this.RaisePropertyChanged("Expr1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Expr2 {
            get {
                return this.Expr2Field;
            }
            set {
                if ((this.Expr2Field.Equals(value) != true)) {
                    this.Expr2Field = value;
                    this.RaisePropertyChanged("Expr2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Grade {
            get {
                return this.GradeField;
            }
            set {
                if ((object.ReferenceEquals(this.GradeField, value) != true)) {
                    this.GradeField = value;
                    this.RaisePropertyChanged("Grade");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResultID {
            get {
                return this.ResultIDField;
            }
            set {
                if ((this.ResultIDField.Equals(value) != true)) {
                    this.ResultIDField = value;
                    this.RaisePropertyChanged("ResultID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StudentID {
            get {
                return this.StudentIDField;
            }
            set {
                if ((this.StudentIDField.Equals(value) != true)) {
                    this.StudentIDField = value;
                    this.RaisePropertyChanged("StudentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudentName {
            get {
                return this.StudentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StudentNameField, value) != true)) {
                    this.StudentNameField = value;
                    this.RaisePropertyChanged("StudentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubjectID {
            get {
                return this.SubjectIDField;
            }
            set {
                if ((this.SubjectIDField.Equals(value) != true)) {
                    this.SubjectIDField = value;
                    this.RaisePropertyChanged("SubjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectName {
            get {
                return this.SubjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectNameField, value) != true)) {
                    this.SubjectNameField = value;
                    this.RaisePropertyChanged("SubjectName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="vwSubject", Namespace="http://schemas.datacontract.org/2004/07/WCFStudent1")]
    [System.SerializableAttribute()]
    public partial class vwSubject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfessorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SemestreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Professor {
            get {
                return this.ProfessorField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessorField, value) != true)) {
                    this.ProfessorField = value;
                    this.RaisePropertyChanged("Professor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Semestre {
            get {
                return this.SemestreField;
            }
            set {
                if ((object.ReferenceEquals(this.SemestreField, value) != true)) {
                    this.SemestreField = value;
                    this.RaisePropertyChanged("Semestre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubjectID {
            get {
                return this.SubjectIDField;
            }
            set {
                if ((this.SubjectIDField.Equals(value) != true)) {
                    this.SubjectIDField = value;
                    this.RaisePropertyChanged("SubjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectName {
            get {
                return this.SubjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectNameField, value) != true)) {
                    this.SubjectNameField = value;
                    this.RaisePropertyChanged("SubjectName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="vwStudent", Namespace="http://schemas.datacontract.org/2004/07/WCFStudent1")]
    [System.SerializableAttribute()]
    public partial class vwStudent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndexNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JMBGField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StudentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StudentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StudentSurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Adress {
            get {
                return this.AdressField;
            }
            set {
                if ((object.ReferenceEquals(this.AdressField, value) != true)) {
                    this.AdressField = value;
                    this.RaisePropertyChanged("Adress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndexNumber {
            get {
                return this.IndexNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexNumberField, value) != true)) {
                    this.IndexNumberField = value;
                    this.RaisePropertyChanged("IndexNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JMBG {
            get {
                return this.JMBGField;
            }
            set {
                if ((object.ReferenceEquals(this.JMBGField, value) != true)) {
                    this.JMBGField = value;
                    this.RaisePropertyChanged("JMBG");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sex {
            get {
                return this.SexField;
            }
            set {
                if ((object.ReferenceEquals(this.SexField, value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StudentID {
            get {
                return this.StudentIDField;
            }
            set {
                if ((this.StudentIDField.Equals(value) != true)) {
                    this.StudentIDField = value;
                    this.RaisePropertyChanged("StudentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudentName {
            get {
                return this.StudentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StudentNameField, value) != true)) {
                    this.StudentNameField = value;
                    this.RaisePropertyChanged("StudentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudentSurname {
            get {
                return this.StudentSurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.StudentSurnameField, value) != true)) {
                    this.StudentSurnameField = value;
                    this.RaisePropertyChanged("StudentSurname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsResultID", ReplyAction="http://tempuri.org/IService1/IsResultIDResponse")]
        bool IsResultID(int resultID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsResultID", ReplyAction="http://tempuri.org/IService1/IsResultIDResponse")]
        System.Threading.Tasks.Task<bool> IsResultIDAsync(int resultID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllResults", ReplyAction="http://tempuri.org/IService1/GetAllResultsResponse")]
        WPFStudent.ServiceReference2.vwResult[] GetAllResults();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllResults", ReplyAction="http://tempuri.org/IService1/GetAllResultsResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwResult[]> GetAllResultsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddResults", ReplyAction="http://tempuri.org/IService1/AddResultsResponse")]
        WPFStudent.ServiceReference2.vwResult AddResults(WPFStudent.ServiceReference2.vwResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddResults", ReplyAction="http://tempuri.org/IService1/AddResultsResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwResult> AddResultsAsync(WPFStudent.ServiceReference2.vwResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteResults", ReplyAction="http://tempuri.org/IService1/DeleteResultsResponse")]
        void DeleteResults(int ResultID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteResults", ReplyAction="http://tempuri.org/IService1/DeleteResultsResponse")]
        System.Threading.Tasks.Task DeleteResultsAsync(int ResultID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetResultsDetail", ReplyAction="http://tempuri.org/IService1/GetResultsDetailResponse")]
        WPFStudent.ServiceReference2.vwResult GetResultsDetail(int ResultID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetResultsDetail", ReplyAction="http://tempuri.org/IService1/GetResultsDetailResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwResult> GetResultsDetailAsync(int ResultID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSubjectByID", ReplyAction="http://tempuri.org/IService1/getSubjectByIDResponse")]
        WPFStudent.ServiceReference2.vwSubject getSubjectByID(int subjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSubjectByID", ReplyAction="http://tempuri.org/IService1/getSubjectByIDResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwSubject> getSubjectByIDAsync(int subjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsSubjectID", ReplyAction="http://tempuri.org/IService1/IsSubjectIDResponse")]
        bool IsSubjectID(int subjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsSubjectID", ReplyAction="http://tempuri.org/IService1/IsSubjectIDResponse")]
        System.Threading.Tasks.Task<bool> IsSubjectIDAsync(int subjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSubjectList", ReplyAction="http://tempuri.org/IService1/GetSubjectListResponse")]
        WPFStudent.ServiceReference2.vwSubject[] GetSubjectList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSubjectList", ReplyAction="http://tempuri.org/IService1/GetSubjectListResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwSubject[]> GetSubjectListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSubject", ReplyAction="http://tempuri.org/IService1/AddSubjectResponse")]
        WPFStudent.ServiceReference2.vwSubject AddSubject(WPFStudent.ServiceReference2.vwSubject subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSubject", ReplyAction="http://tempuri.org/IService1/AddSubjectResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwSubject> AddSubjectAsync(WPFStudent.ServiceReference2.vwSubject subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteSubject", ReplyAction="http://tempuri.org/IService1/DeleteSubjectResponse")]
        void DeleteSubject(int SubjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteSubject", ReplyAction="http://tempuri.org/IService1/DeleteSubjectResponse")]
        System.Threading.Tasks.Task DeleteSubjectAsync(int SubjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneSubject", ReplyAction="http://tempuri.org/IService1/GetOneSubjectResponse")]
        WPFStudent.ServiceReference2.vwSubject GetOneSubject(int SubjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneSubject", ReplyAction="http://tempuri.org/IService1/GetOneSubjectResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwSubject> GetOneSubjectAsync(int SubjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getStudentByID", ReplyAction="http://tempuri.org/IService1/getStudentByIDResponse")]
        WPFStudent.ServiceReference2.vwStudent getStudentByID(int studentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getStudentByID", ReplyAction="http://tempuri.org/IService1/getStudentByIDResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwStudent> getStudentByIDAsync(int studentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsStudentID", ReplyAction="http://tempuri.org/IService1/IsStudentIDResponse")]
        bool IsStudentID(int studentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsStudentID", ReplyAction="http://tempuri.org/IService1/IsStudentIDResponse")]
        System.Threading.Tasks.Task<bool> IsStudentIDAsync(int studentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentList", ReplyAction="http://tempuri.org/IService1/GetStudentListResponse")]
        WPFStudent.ServiceReference2.vwStudent[] GetStudentList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudentList", ReplyAction="http://tempuri.org/IService1/GetStudentListResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwStudent[]> GetStudentListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddStudent", ReplyAction="http://tempuri.org/IService1/AddStudentResponse")]
        WPFStudent.ServiceReference2.vwStudent AddStudent(WPFStudent.ServiceReference2.vwStudent student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddStudent", ReplyAction="http://tempuri.org/IService1/AddStudentResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwStudent> AddStudentAsync(WPFStudent.ServiceReference2.vwStudent student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStudent", ReplyAction="http://tempuri.org/IService1/DeleteStudentResponse")]
        void DeleteStudent(int StudentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStudent", ReplyAction="http://tempuri.org/IService1/DeleteStudentResponse")]
        System.Threading.Tasks.Task DeleteStudentAsync(int StudentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneStudent", ReplyAction="http://tempuri.org/IService1/GetOneStudentResponse")]
        WPFStudent.ServiceReference2.vwStudent GetOneStudent(int StudentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOneStudent", ReplyAction="http://tempuri.org/IService1/GetOneStudentResponse")]
        System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwStudent> GetOneStudentAsync(int StudentID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WPFStudent.ServiceReference2.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WPFStudent.ServiceReference2.IService1>, WPFStudent.ServiceReference2.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsResultID(int resultID) {
            return base.Channel.IsResultID(resultID);
        }
        
        public System.Threading.Tasks.Task<bool> IsResultIDAsync(int resultID) {
            return base.Channel.IsResultIDAsync(resultID);
        }
        
        public WPFStudent.ServiceReference2.vwResult[] GetAllResults() {
            return base.Channel.GetAllResults();
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwResult[]> GetAllResultsAsync() {
            return base.Channel.GetAllResultsAsync();
        }
        
        public WPFStudent.ServiceReference2.vwResult AddResults(WPFStudent.ServiceReference2.vwResult result) {
            return base.Channel.AddResults(result);
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwResult> AddResultsAsync(WPFStudent.ServiceReference2.vwResult result) {
            return base.Channel.AddResultsAsync(result);
        }
        
        public void DeleteResults(int ResultID) {
            base.Channel.DeleteResults(ResultID);
        }
        
        public System.Threading.Tasks.Task DeleteResultsAsync(int ResultID) {
            return base.Channel.DeleteResultsAsync(ResultID);
        }
        
        public WPFStudent.ServiceReference2.vwResult GetResultsDetail(int ResultID) {
            return base.Channel.GetResultsDetail(ResultID);
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwResult> GetResultsDetailAsync(int ResultID) {
            return base.Channel.GetResultsDetailAsync(ResultID);
        }
        
        public WPFStudent.ServiceReference2.vwSubject getSubjectByID(int subjectID) {
            return base.Channel.getSubjectByID(subjectID);
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwSubject> getSubjectByIDAsync(int subjectID) {
            return base.Channel.getSubjectByIDAsync(subjectID);
        }
        
        public bool IsSubjectID(int subjectID) {
            return base.Channel.IsSubjectID(subjectID);
        }
        
        public System.Threading.Tasks.Task<bool> IsSubjectIDAsync(int subjectID) {
            return base.Channel.IsSubjectIDAsync(subjectID);
        }
        
        public WPFStudent.ServiceReference2.vwSubject[] GetSubjectList() {
            return base.Channel.GetSubjectList();
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwSubject[]> GetSubjectListAsync() {
            return base.Channel.GetSubjectListAsync();
        }
        
        public WPFStudent.ServiceReference2.vwSubject AddSubject(WPFStudent.ServiceReference2.vwSubject subject) {
            return base.Channel.AddSubject(subject);
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwSubject> AddSubjectAsync(WPFStudent.ServiceReference2.vwSubject subject) {
            return base.Channel.AddSubjectAsync(subject);
        }
        
        public void DeleteSubject(int SubjectID) {
            base.Channel.DeleteSubject(SubjectID);
        }
        
        public System.Threading.Tasks.Task DeleteSubjectAsync(int SubjectID) {
            return base.Channel.DeleteSubjectAsync(SubjectID);
        }
        
        public WPFStudent.ServiceReference2.vwSubject GetOneSubject(int SubjectID) {
            return base.Channel.GetOneSubject(SubjectID);
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwSubject> GetOneSubjectAsync(int SubjectID) {
            return base.Channel.GetOneSubjectAsync(SubjectID);
        }
        
        public WPFStudent.ServiceReference2.vwStudent getStudentByID(int studentID) {
            return base.Channel.getStudentByID(studentID);
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwStudent> getStudentByIDAsync(int studentID) {
            return base.Channel.getStudentByIDAsync(studentID);
        }
        
        public bool IsStudentID(int studentID) {
            return base.Channel.IsStudentID(studentID);
        }
        
        public System.Threading.Tasks.Task<bool> IsStudentIDAsync(int studentID) {
            return base.Channel.IsStudentIDAsync(studentID);
        }
        
        public WPFStudent.ServiceReference2.vwStudent[] GetStudentList() {
            return base.Channel.GetStudentList();
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwStudent[]> GetStudentListAsync() {
            return base.Channel.GetStudentListAsync();
        }
        
        public WPFStudent.ServiceReference2.vwStudent AddStudent(WPFStudent.ServiceReference2.vwStudent student) {
            return base.Channel.AddStudent(student);
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwStudent> AddStudentAsync(WPFStudent.ServiceReference2.vwStudent student) {
            return base.Channel.AddStudentAsync(student);
        }
        
        public void DeleteStudent(int StudentID) {
            base.Channel.DeleteStudent(StudentID);
        }
        
        public System.Threading.Tasks.Task DeleteStudentAsync(int StudentID) {
            return base.Channel.DeleteStudentAsync(StudentID);
        }
        
        public WPFStudent.ServiceReference2.vwStudent GetOneStudent(int StudentID) {
            return base.Channel.GetOneStudent(StudentID);
        }
        
        public System.Threading.Tasks.Task<WPFStudent.ServiceReference2.vwStudent> GetOneStudentAsync(int StudentID) {
            return base.Channel.GetOneStudentAsync(StudentID);
        }
    }
}
